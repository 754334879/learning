Sass的规则：

https://www.sass.hk/guide/

1.变量
使用$符号标识变量。

声明变量
$siderbar-width: 3px。意味着变量siderbar-width的值为3px。+
声明变量可以在规则块内（此时只在改规则块及其嵌套的块内有效），也可以在规则块外（此时可以在任何地方使用）

变量引用
.sider{
	border: $siderbar-wdith solid red;
}
凡是CSS属性值可以存在的地方就可以使用变量；而且在定义变量的时候也可以引用其他变量。


2.规则嵌套
效果如下：
#content {
  article {
    h1 { color: #333 }
    p { margin-bottom: 1.4em }
  }
  aside { background-color: #EEE }
}
编译后：
#content article h1 { color: #333 }
#content article p { margin-bottom: 1.4em }
#content aside { background-color: #EEE }

编译的过程见链接。

2.1父选择器&
在嵌套的规则中，可以使用&标识父选择器，实现伪类、伪元素、多个选择符选择一个元素的形式。
效果。否则就是在父选择器后面加空格，再加嵌套规则的选择器了：

效果：
article a {
  color: blue;
  &:hover { color: red }
  &.store {font-size: 20px}
}
编译后：
article a { color: blue }
article a:hover { color: red }
article a.store { font-size: 20px }

2.2群组选择器的嵌套
效果如下：
.container {
  h1, h2, h3 {margin-bottom: .8em}
}
编译后：
.container h1, .container h2, .container h3 { margin-bottom: .8em }

其实就是，如果一个群组选择器被嵌套在规则块的里面，则外层的父选择器会分别添加到群组选择器的每个选择符前面。

2.3>、+、~选择符
使用这些选择符的时候直接用就好，嵌套的外层选择器会添加到这些选择符前面的。

2.4属性嵌套
这个用的不多。把属性名从中划线-的地方断开，在根属性后面添加一个冒号:，然后后面加上大括号{ }，把属性的其他部分写在里面。
nav {
  border: {
  style: solid;
  width: 1px;
  color: #ccc;
  }
}
编译后：
nav {
  border-style: solid;
  border-width: 1px;
  border-color: #ccc;
}

3.导入SASS文件
使用@import 规则可以导入，可以省略.sass或.scss后缀。
比如，@import "sidebar"; 这条命令将sidebar.scss文件中的所有样式添加到当前样式表中

3.1默认变量值
一般情况下，当多次声明一个变量时，最后一处声明会覆盖前面的值。当写了一个可能在其他地方通过@import引入的scss文件，希望导入者可以定制修改sass文件中的某些值，如果不指定修改可以使用默认值。
通过!defalut可以实现。含义是：如果这个变量被声明赋值了，就用它声明的值，否则用这个默认值。如下面的代码，用户在导入这个sass文件前就声明了$fancybox-width变量，那么这个局部文件对$fancybox-width的赋值400就无效了。
$fancybox-width: 400px !default;
.fancybox {
width: $fancybox-width;
}

3.2嵌套导入
sass允许@import命令写在css规则内。这种情况下，引入的局部文件会被直接插入到css规则内导入它的地方。被导入文件中定义的所有变量和混合器，也会在这个规则范围内生效。

比如，有一个局部文件_blue-theme.scss
aside {
  background: blue;
  color: white;
}
然后，将其导入到一个CSS规则内：
.blue-theme {@import "blue-theme"}

编译后的效果：
.blue-theme {
  aside {
    background: blue;
    color: #fff;
  }
}

3.3原生CSS导入
当：
被导入文件的名字以.css结尾
被导入文件的名字是一个URL地址
被导入文件的名字是css的url()值
时，就执行CSS@import

4.注释
CSS中的注释是 /*   */
sass中的注释是 //， 与js的相同

5.混合器
使用变量能够实现对一些样式值当重用 和 统一管理；但如果需要大段大段的重用样式，独立的变量就不能应对这种情况了。

使用@mixin标识符定义混合器，用来给一大段样式赋予一个名字，这样就可以通过引用这个名字重用这段样式。如
@mixin rounded-corners {
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  -o-border-radius: 5px;
  border-radius: 5px;
}
在样式表中，通过@include来使用这个混合器。会将里面的所有样式提取出来放到@include被调用的地方。如：
notice {
  background-color: green;
  border: 2px solid #00aa00;
  @include rounded-corners;
}
编译后：
notice {
  background-color: green;
  border: 2px solid #00aa00;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  -o-border-radius: 5px;
  border-radius: 5px;
}

5.1混合器中的CSS规则
混合器中不仅可以包含属性，还可以包含CSS规则，包含选择器和选择器中的属性。此时混合器中的规则会生成为父规则中的嵌套规则。如
@mixin no-bullets {
  list-style: none;
  li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0px;
  }
}
ul.plain {
  color: #444;
  @include no-bullets
}
编译后：
ul.plain {
  color: #444;
  list-style: none;
}
ul.plain li {
  list-style-image: none;
  list-style-type: none;
  margin-left: 0px;
}

如果一个混合器只包含css规则，不包含属性，那么这个混合器可以在文档的顶部调用，写在所有的css规则块之外。

5.2给混合器传参
可以在@include混合器时传递参数，来实现不同的样式。类似于js里调用function
@mixin link-color($normal, $hover, $visited) {
  color: $normal;
  &:hover{
    color: $hover;
  }
  &:visited {
    color: $visited;
  }
}
使用方式：
a {
  @include link-color(blue, red, green)
}

但，在调用时不容易区分每个参数是什么意思，以及参数的顺序。为解决这个问题，sass允许通过语法 $name: value 的形式来指定每个参数的值。此时，顺序就不重要了
a {
  @include link-color($hover: red, $normal: blue, $visited: green)
}

5.3默认参数值
为了在@include混合器时不必传入所有参数，可以在定义@mixin时指定默认值。使用$name: defalut-value的形式，默认值可以是任何有效的CSS属性，甚至是其他参数的引用（这种指定默认值当形式与ES6为函数命名参数指定默认值类似）

@mixin link-colors($normal, $hover: $normal, $visited: $normal){
  color: $normal;
  &:hover{
    color: $hover;
  }
  &:visited {
    color: $visited;
  }
}
调用：@include link-colors($normal: red)，则$hover和$visited也被自动赋值red。

6.使用选择器继承
不常用









